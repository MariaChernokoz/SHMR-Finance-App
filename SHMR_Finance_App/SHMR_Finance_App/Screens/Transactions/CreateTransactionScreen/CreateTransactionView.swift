import SwiftUI

struct CreateTransactionView: View {
    @StateObject var viewModel: CreateTransactionViewModel
    let onSave: (() -> Void)? // callback –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    @State private var showAlert = false
    @State private var isLoading = false
    
    @FocusState private var isAmountFocused: Bool
    @State private var showDatePicker = false
    @State private var showTimePicker = false
    @FocusState private var isCommentFocused: Bool

    var filteredCategories: [Category] {
        viewModel.categories.filter { $0.isIncome == viewModel.direction }
    }

    var isEdit: Bool { viewModel.transactionToEdit != nil }
    
    var navTitle: String {
        viewModel.direction == .income ? "–ú–æ–∏ –¥–æ—Ö–æ–¥—ã" : "–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã"
    }
    var deleteButtonTitle: String {
        viewModel.direction == .income ? "–£–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥" : "–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
    }
    
    // –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    var formattedDate: String {
        let df = DateFormatter()
        df.locale = Locale(identifier: "ru_RU")
        df.dateFormat = "d MMMM"
        return df.string(from: viewModel.date)
    }
    var formattedTime: String {
        let tf = DateFormatter()
        tf.locale = Locale(identifier: "ru_RU")
        tf.dateFormat = "HH:mm"
        return tf.string(from: viewModel.date)
    }

    var body: some View {
        NavigationView {
            List {
                Section {} header: {
                    Text(navTitle)
                        .font(.system(size: 34, weight: .bold))
                        .foregroundStyle(.black)
                        .padding(.bottom, -8)
                        .textCase(nil)
                        .listRowBackground(Color.clear)
                        .listRowInsets(EdgeInsets(top: 0, leading: 0, bottom: 0, trailing: 0))
                }
                
                // Picker —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ direction
                HStack {
                    Text("–°—Ç–∞—Ç—å—è")
                        .foregroundColor(.primary)
                    Spacer()
                    ZStack {
                        HStack(spacing: 16) {
                            Text(viewModel.selectedCategory?.name ?? "")
                                .foregroundColor(.gray)
                            Image(systemName: "chevron.right")
                                .font(.system(size: 15))
                                .foregroundColor(.gray)
                        }
                        Picker("", selection: $viewModel.selectedCategory) {
                            ForEach(viewModel.filteredCategories) { category in
                                Text(category.name).tag(Optional(category))
                            }
                        }
                        .labelsHidden()
                        .opacity(0) // Picker –Ω–µ–≤–∏–¥–∏–º—ã–π, –Ω–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π
                        .contentShape(Rectangle())
                    }
                }
                
                // –°—É–º–º–∞
                HStack {
                    Text("–°—É–º–º–∞")
                    Spacer()
                    ZStack(alignment: .trailing) {
                        if viewModel.amount.isEmpty {
                            Text("0 ‚ÇΩ")
                                .foregroundColor(.gray)
                        } else {
                            let amountDecimal = Decimal(string: viewModel.amount.replacingOccurrences(of: ",", with: ".")) ?? 0
                            Text(amountDecimal.formattedAmount + " ‚ÇΩ")
                                .foregroundColor(.gray)
                        }
                        EditAmountField(
                            amount: $viewModel.amount,
                            isFocused: $isAmountFocused,
                            placeholder: "",
                            textColor: .clear,
                            alignment: .trailing
                        )
                    }
                }
                .contentShape(Rectangle())
                .onTapGesture { isAmountFocused = true }
                
                // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                DatePickerRow(title: "–î–∞—Ç–∞", date: $viewModel.date)
                TimePickerRow(title: "–í—Ä–µ–º—è", date: $viewModel.date)

                // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                TextField("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", text: $viewModel.comment)
                    .foregroundColor(.primary)
                    .keyboardType(.default)
                    .focused($isCommentFocused)
                    .onTapGesture { isCommentFocused = true }
                
                // –£–¥–∞–ª–∏—Ç—å (—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                Section {
                    if isEdit {
                        Button(deleteButtonTitle) {
                            viewModel.delete(onDelete: {
                                onSave?()
                            })
                        }
                        .foregroundColor(.red)
                        .disabled(viewModel.isLoading)
                    }
                }
                .listSectionSpacing(50)
            }
            .scrollDismissesKeyboard(.immediately)
            .listStyle(.insetGrouped)
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("–û—Ç–º–µ–Ω–∞") {
                        onSave?()
                    }
                    .tint(.navigation)
                }
                ToolbarItem(placement: .confirmationAction) {
                    Button(isEdit ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–°–æ–∑–¥–∞—Ç—å") {
                        if isEdit {
                            viewModel.save(onSave: onSave ?? {})
                        } else {
                            viewModel.create(onSave: onSave ?? {})
                        }
                    }
                    .tint(.navigation)
                    .fontWeight(.regular)
                    .disabled(viewModel.isLoading)
                }
            }
            .alert(isPresented: $viewModel.showAlert) {
                Alert(title: Text("–û—à–∏–±–∫–∞"), message: Text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"), dismissButton: .default(Text("–û–∫")))
            }
            .task {
                await viewModel.loadAccount()
            }
        }
    }
}

#Preview {
    let testCategories = [
        Category(id: 1, name: "–ü—Ä–æ–¥—É–∫—Ç—ã", emoji: "üçè", isIncome: .income),
        Category(id: 2, name: "–ó–∞—Ä–ø–ª–∞—Ç–∞", emoji: "üí∏", isIncome: .outcome)
    ]
    let testTransactions = [
        Transaction(id: 1, accountId: 1, categoryId: 1, amount: 1010, transactionDate: Date(), comment: "test", createdAt: Date(), updatedAt: Date())
    ]
    // —Å–æ–∑–¥–∞–Ω–∏–µ
    CreateTransactionView(
        viewModel: CreateTransactionViewModel(
            direction: .outcome,
            mainAccountId: 1,
            categories: testCategories,
            transactions: testTransactions
        ),
        onSave: {}
    )
    // —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    CreateTransactionView(
        viewModel: CreateTransactionViewModel(
            direction: .outcome,
            mainAccountId: 1,
            categories: testCategories,
            transactions: testTransactions,
            transactionToEdit: testTransactions[0]
        ),
        onSave: {}
    )
}
