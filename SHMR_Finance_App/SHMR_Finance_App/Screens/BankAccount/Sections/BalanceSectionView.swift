//
//  BalanceSectionView.swift
//  SHMR_Finance_App
//
//  Created by Chernokoz on 27.06.2025.
//

import SwiftUI

//–ù–∞ —ç–∫—Ä–∞–Ω–µ "–ú–æ–π —Å—á–µ—Ç" –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–∞–ª–∞–Ω—Å–æ–º

struct BalanceSectionView: View {
    @Binding var isEditing: Bool
    @Binding var editingBalance: String
    @FocusState.Binding var isBalanceFieldFocused: Bool
    @Binding var isBalanceHidden: Bool
    @ObservedObject var viewModel: AccountViewModel

    var body: some View {
        Section {
            HStack {
                Text("üí∞")
                    .padding(.trailing, 10)
                Text("–ë–∞–ª–∞–Ω—Å")
                Spacer()
                //–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                if isEditing {
                    TextField("", text: $editingBalance)
                        //–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        .keyboardType(.decimalPad)
                        .focused($isBalanceFieldFocused)
                        .foregroundColor(.gray)
                        .multilineTextAlignment(.trailing)
                        
                        //—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∏–º–≤–æ–ª—ã
                        .onChange(of: editingBalance) { _, newValue in
                            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª—ã
                            var filtered = newValue.filter { "0123456789, ".contains($0) }
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∑–∞–ø—è—Ç–æ–π
                            let components = filtered.components(separatedBy: ",")
                            if components.count > 2 {
                                filtered = components[0] + "," + components[1]
                            }
                            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–æ 2
                            if components.count == 2, let fractional = components.last {
                                let limitedFractional = String(fractional.prefix(2))
                                filtered = components[0] + "," + limitedFractional
                            }
                            if filtered != newValue {
                                editingBalance = filtered
                            }
                        }
                } else {
                    if isBalanceHidden {
                        Text(
                            viewModel.bankAccount.map { viewModel.formattedBalance($0.balance) } ?? ""
                        )
                            .spoiler(isOn: $isBalanceHidden)
                    } else {
                        Text(viewModel.bankAccount?.balance.formatted(.number.precision(.fractionLength(2))) ?? "-")
                            .transition(.opacity)
                    }
                }
            }
        }
        .listRowBackground(isEditing ? Color.white : Color.accentColor)
    }
}
