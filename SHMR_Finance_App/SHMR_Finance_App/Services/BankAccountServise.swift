//
//  BankAccountServise.swift
//  SHMR_Finance_App
//
//  Created by Chernokoz on 14.06.2025.
//

import Foundation

@MainActor
final class BankAccountsService: ObservableObject {
    static let shared: BankAccountsService = {
        let service = BankAccountsService()
        return service
    }()

    private let localStore: BankAccountLocalStore
    // private let backupStore: BankAccountBackupStore (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)

    private init() {
        do {
            let localStore = try SwiftDataBankAccountLocalStore()
            self.localStore = localStore
        } catch {
            assertionFailure("Failed to initialize BankAccountsService storage: \(error)")
            fatalError("Critical: Unable to initialize BankAccountsService storage")
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞
    func getAllAccounts() async throws -> [BankAccount] {
        do {
            // –°–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            let accounts = try await NetworkClient.shared.fetchDecodeData(endpointValue: "api/v1/accounts", dataType: BankAccount.self)
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            AppNetworkStatus.shared.handleSuccessfulRequest()
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            for account in accounts {
                try await localStore.addAccount(account)
            }
            
            return accounts
        } catch let error as NetworkError {
            print("‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: \(error.userFriendlyMessage)")
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ
            AppNetworkStatus.shared.handleNetworkError(error)
            
            // –ï—Å–ª–∏ —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            let localAccounts = try await localStore.fetchAllAccounts()
            
            // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∂–µ –ø—É—Å—Ç–æ–µ, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if localAccounts.isEmpty {
                print("üîç –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç...")
                let testAccount = BankAccount(
                    id: 1,
                    userId: 1,
                    name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç",
                    balance: Decimal(100000),
                    currency: "‚ÇΩ",
                    createdAt: Date(),
                    updatedAt: Date()
                )
                try await localStore.addAccount(testAccount)
                return [testAccount]
            }
            
            return localAccounts
        } catch {
            print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: \(error)")
            
            // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            let localAccounts = try await localStore.fetchAllAccounts()
            
            if localAccounts.isEmpty {
                print("üîç –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç...")
                let testAccount = BankAccount(
                    id: 1,
                    userId: 1,
                    name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç",
                    balance: Decimal(100000),
                    currency: "‚ÇΩ",
                    createdAt: Date(),
                    updatedAt: Date()
                )
                try await localStore.addAccount(testAccount)
                return [testAccount]
            }
            
            return localAccounts
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç –ø–æ id
    func getAccount(by id: Int) async throws -> BankAccount? {
        return try await localStore.fetchAccount(by: id)
    }

    // –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç
    func saveAccount(_ account: BankAccount) async throws {
        do {
            // let request = ... // –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å
            // try await NetworkClient.shared.request(...)
            try await localStore.updateAccount(account)
            // –ï—Å–ª–∏ —É—Å–ø–µ—Ö ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
        } catch {
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –±—ç–∫–∞–ø (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
            try await localStore.updateAccount(account)
        }
    }

    // –£–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç
    func deleteAccount(by id: Int) async throws {
        do {
            // try await NetworkClient.shared.request(...)
            try await localStore.deleteAccount(by: id)
            // –ï—Å–ª–∏ —É—Å–ø–µ—Ö ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
        } catch {
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –±—ç–∫–∞–ø (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
            try await localStore.deleteAccount(by: id)
        }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    func updateAccountBalance(accountId: Int, amount: Decimal, isIncome: Bool) async throws {
        guard let account = try await localStore.fetchAccount(by: accountId) else {
            throw AccountError.accountNotFound
        }
        
        var updatedAccount = account
        if isIncome {
            updatedAccount.balance += amount
        } else {
            updatedAccount.balance -= amount
        }
        updatedAccount.updatedAt = Date()
        
        try await localStore.updateAccount(updatedAccount)
    }
}

enum AccountError: Error, LocalizedError {
    case accountNotFound
    var errorDescription: String? {
        switch self {
        case .accountNotFound: return "Account not found"
        }
    }
}
