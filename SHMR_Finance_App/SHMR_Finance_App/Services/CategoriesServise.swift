//
//  CategoriesServise.swift
//  SHMR_Finance_App
//
//  Created by Chernokoz on 14.06.2025.
//

import Foundation

@MainActor
final class CategoriesService: ObservableObject {
    static let shared: CategoriesService = {
        let service = CategoriesService()
        return service
    }()

    private let localStore: CategoriesLocalStore

    private init() {
        do {
            let localStore = try SwiftDataCategoriesLocalStore()
            self.localStore = localStore
        } catch {
            assertionFailure("Failed to initialize CategoriesService storage: \(error)")
            fatalError("Critical: Unable to initialize CategoriesService storage")
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    func getAllCategories() async throws -> [Category] {
        do {
            // –°–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            let categories = try await NetworkClient.shared.fetchDecodeData(endpointValue: "api/v1/categories", dataType: Category.self)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            for category in categories {
                try await localStore.addCategory(category)
            }
            
            return categories
        } catch let error as NetworkError {
            print("‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: \(error.userFriendlyMessage)")
            
            // –ï—Å–ª–∏ —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            let localCategories = try await localStore.fetchAllCategories()
            
            // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∂–µ –ø—É—Å—Ç–æ–µ, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if localCategories.isEmpty {
                print("üîç –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
                let testCategories = [
                    Category(id: 1, name: "–ü—Ä–æ–¥—É–∫—Ç—ã", emoji: "üõí", isIncome: false),
                    Category(id: 2, name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", emoji: "üöó", isIncome: false),
                    Category(id: 3, name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", emoji: "üéÆ", isIncome: false),
                    Category(id: 4, name: "–ó–∞—Ä–ø–ª–∞—Ç–∞", emoji: "üí∞", isIncome: true),
                    Category(id: 5, name: "–ü–æ–¥–∞—Ä–∫–∏", emoji: "üéÅ", isIncome: true),
                    Category(id: 6, name: "–ó–¥–æ—Ä–æ–≤—å–µ", emoji: "üè•", isIncome: false),
                    Category(id: 7, name: "–ö—Ä–∞—Å–æ—Ç–∞", emoji: "üíÑ", isIncome: false),
                    Category(id: 8, name: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", emoji: "üìö", isIncome: false),
                    Category(id: 9, name: "–•–æ–±–±–∏", emoji: "üé®", isIncome: false),
                    Category(id: 10, name: "–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ", emoji: "üêæ", isIncome: false),
                    Category(id: 11, name: "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", emoji: "üçΩÔ∏è", isIncome: false)
                ]
                
                for category in testCategories {
                    try await localStore.addCategory(category)
                }
                
                return testCategories
            }
            
            return localCategories
        } catch {
            print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: \(error)")
            
            // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            let localCategories = try await localStore.fetchAllCategories()
            
            if localCategories.isEmpty {
                print("üîç –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
                let testCategories = [
                    Category(id: 1, name: "–ü—Ä–æ–¥—É–∫—Ç—ã", emoji: "üõí", isIncome: false),
                    Category(id: 2, name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", emoji: "üöó", isIncome: false),
                    Category(id: 3, name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", emoji: "üéÆ", isIncome: false),
                    Category(id: 4, name: "–ó–∞—Ä–ø–ª–∞—Ç–∞", emoji: "üí∞", isIncome: true),
                    Category(id: 5, name: "–ü–æ–¥–∞—Ä–∫–∏", emoji: "üéÅ", isIncome: true),
                    Category(id: 6, name: "–ó–¥–æ—Ä–æ–≤—å–µ", emoji: "üè•", isIncome: false),
                    Category(id: 7, name: "–ö—Ä–∞—Å–æ—Ç–∞", emoji: "üíÑ", isIncome: false),
                    Category(id: 8, name: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", emoji: "üìö", isIncome: false),
                    Category(id: 9, name: "–•–æ–±–±–∏", emoji: "üé®", isIncome: false),
                    Category(id: 10, name: "–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ", emoji: "üêæ", isIncome: false),
                    Category(id: 11, name: "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", emoji: "üçΩÔ∏è", isIncome: false)
                ]
                
                for category in testCategories {
                    try await localStore.addCategory(category)
                }
                
                return testCategories
            }
            
            return localCategories
        }
    }

    // –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    func saveCategory(_ category: Category) async throws {
        do {
            // let request = ... // –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å
            // try await NetworkClient.shared.request(...)
            try await localStore.updateCategory(category)
        } catch {
            try await localStore.updateCategory(category)
        }
    }

    // –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    func deleteCategory(by id: Int) async throws {
        do {
            // try await NetworkClient.shared.request(...)
            try await localStore.deleteCategory(by: id)
        } catch {
            try await localStore.deleteCategory(by: id)
        }
    }
}
